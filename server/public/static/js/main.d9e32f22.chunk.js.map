{"version":3,"sources":["SelectMovie.tsx","PriceTable.tsx","Errors.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["SelectMovie","props","react_default","a","createElement","Form_default","Row","className","Col_default","md","Group","Label","Control","as","onChange","newMovieSelected","Object","keys","movies","map","movie","i","key","value","PriceTable","cinemas","movieDetails","Table_default","striped","bordered","hover","variant","colSpan","cinema","toUpperCase","Errors","Row_default","style","color","errorMessage","errorCode","onClick","tryAgain","aria-label","clearError","aria-hidden","margin","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getMovies","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","abrupt","setState","showErrors","loadingMovies","movieSelected","getMovieDetails","stop","_ref2","_callee2","e","_context2","console","log","target","_x","apply","arguments","_ref3","_callee3","_context3","_x2","loadingPrice","method","headers","Content-Type","body","JSON","stringify","Container_default","src_Errors","Fragment","src_SelectMovie","src_PriceTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9e32f22.chunk.js","sourcesContent":["// Import necessary libraries\nimport React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\n// Functional component for dispaying the form\nconst SelectMovie = (props: any) => {\n\n  return (\n    <form>\n      <Form.Row className=\"justify-content-md-center\">\n        <Col md=\"auto\">\n          <Form.Group>\n            <Form.Label>Movies</Form.Label>\n              <Form.Control  as=\"select\" onChange={props.newMovieSelected}>\n              {Object.keys(props.movies).map((movie: string, i: number) =>\n                <option key={i} value={movie}>{movie}</option>\n              )}\n              </Form.Control>\n          </Form.Group>\n        </Col>\n      </Form.Row>\n    </form>\n  )\n}\n// Export the component as the default object\nexport default SelectMovie;\n","// Import necessary libraries\nimport React from 'react';\nimport Table from 'react-bootstrap/Table'\n\n// Functional component for dispaying the profit data\nconst PriceTable = (props: any) => {\n  const cinemas = Object.keys(props.movieDetails);\n  const movieDetails = props.movieDetails;\n  return (\n    <div>\n      <Table striped bordered hover variant=\"dark\">\n        <tbody>\n          <tr>\n            <th colSpan={2}><b>Price</b></th>\n          </tr>\n\n            {cinemas.map((cinema, i) =>\n                <tr key = {i}>\n                  <td>{cinema.toUpperCase()}</td>\n                  <td>${movieDetails[cinema]['Price']}</td>\n                </tr>\n            )}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n// Export the component as the default object\nexport default PriceTable;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst Errors = (props: any) =>{\n  return (\n    <Col>\n      <Row className=\"justify-content-md-center\">\n        <p style={{ color: 'red' }}>{props.errorMessage}</p>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n\n          { (props.errorCode == 1 || props.errorCode == 2)?\n              <button style={{ color: 'purple'}} onClick={props.tryAgain} className=\"close\" aria-label=\"Close\" >\n                Try Again\n              </button>\n           : null }\n\n        <button onClick={props.clearError} className=\"close\" aria-label=\"Close\" >\n          <span aria-hidden=\"true\" style={{ color: 'red', margin: '0 0 0 3em '}}>Ã—</span>\n        </button>\n      </Row>\n    </Col>\n  )\n}\n\nexport default Errors\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\nimport SelectMovie from './SelectMovie';\nimport PriceTable from './PriceTable';\nimport Errors from './Errors';\nimport './App.css';\n\nclass App extends Component {\n  state: any\n  constructor(props: any){\n    super(props)\n    this.state= {\n      movies: {},\n      movieDetails: {},\n      movieSelected: '',\n      showErrors: false,\n      errorMessage: '',\n      errorCode: 0,\n      loadingMovies: true,\n      loadingPrice: true,\n    };\n  }\n\n  async componentDidMount () {\n    await this.getMovies();\n\n  }\n\n  // tryMultipleTimes = async (numTries: number, ) => {\n\n  // }\n  getMovies = async () =>{\n    let data: any = {}\n    for(let i = 0; i < 3; i++){\n      data= await fetch('/api/movies');\n      data = await data.json();\n      if(data['code'] !== 3){\n        break;\n      }\n    }\n    if(data['code'] === 3){\n      this.setState({\n        errorCode: 1,\n        showErrors: true,\n        errorMessage: 'Could not retrive Movies',\n        loadingMovies: false\n      })\n    }\n    else{\n      await this.setState({showErrors: false, errorCode: 0, loadingMovies: false, movies: data['movies'], movieSelected: Object.keys(data['movies'])[0]})\n      this.getMovieDetails();\n\n    }\n\n\n\n\n  }\n\n  async getMovieDetails () {\n    await this.setState({loadingPrice: true})\n    let data: any\n    for(let i = 0; i < 3; i++){\n      data = await fetch('/api/movie', {\n        method: \"POST\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify(this.state.movies[this.state.movieSelected]), // body data type must match \"Content-Type\" header\n      });\n      data = await data.json();\n      if(data['code'] !== 3){\n        break;\n      }\n    }\n    if(data['code'] === 3){\n      if(data['code'] === 3){\n        this.setState({\n          errorCode: 2,\n          showErrors: true,\n          errorMessage: 'Could not retrive price'\n        })\n      }\n    }else{\n      this.setState({showErrors: false, loadingPrice: false, movieDetails: data['cinemas']})\n    }\n\n  }\n\n  newMovieSelected = async (e: any)=>{\n    console.log(e.target.value )\n    await this.setState({ movieSelected: e.target.value })\n    this.getMovieDetails();\n  }\n\n  clearError = (e: any) => {\n    this.setState({showErrors: false})\n  }\n\n  tryAgain = async (e: any) => {\n\n    let errorCode = this.state.errorCode\n    if(errorCode == 1)\n      await this.getMovies();\n    else if(errorCode == 2)\n      await this.getMovieDetails();\n\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n          <header className=\"App-header\">\n          <Container>\n            { this.state.showErrors ?\n            <Errors\n              errorMessage={this.state.errorMessage}\n              errorCode={this.state.errorCode}\n              clearError={this.clearError}\n              tryAgain={this.tryAgain}\n            /> :\n            this.state.loadingMovies?<p>Loading</p>:\n              <React.Fragment>\n                <Container>\n                    <h1 style={{margin: '50px'}}>Compare Movie Price</h1>\n                </Container>\n                <Container>\n                    <SelectMovie\n                      newMovieSelected={this.newMovieSelected}\n                      movies={this.state.movies}\n                    />\n                </Container>\n                <Container>\n                  {this.state.loadingPrice?<p>Getting Price</p>:\n                    <PriceTable\n                      movieDetails={this.state.movieDetails}\n                    />\n                  }\n                </Container>\n              </React.Fragment>\n            }\n          </Container>\n\n\n        </header>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}